#!/usr/bin/env bash
set -uefo pipefail
createbranch=yes
commitmessage=
nofzf=
noassignee=${GH_WORKON_NOASSIGNEE:-""}
jira=
limit=${GH_WORKON_LIMIT:-""}
worktree=${GH_WORKON_WORKTREE:-""}
debug=
frombranch=

[[ -n ${GH_WORKON_NOCREATEBRANCH:-""} ]] && createbranch=
[[ -n ${GH_WORKON_DEBUG:-""} ]] && debug="echo"

DEFAULTLIMIT=30
AWK="awk"
SED="sed"
type -p gawk >/dev/null && AWK=gawk
type -p gsed >/dev/null && SED=gsed

[[ -n ${debug} ]] && set -x
function usage {
  echo "Usag: gh-workon [-h] issue-to-search"
  echo "  -h show this help"
  echo "  -d show command that is about to run but don't run them (env: \$GH_WORKON_DEBUG)"
  echo "  -N do not create a branch or worktree, just show the branch that is about to be created (env: \$GH_WORKON_NOCREATEBRANCH)"
  echo "  -c create a commit message out of the issue"
  echo "  -A do not automatically assign the issue to the current user (env: \$GH_WORKON_NOASSIGNEE)"
  echo "  -l limit the number of issues to list (default: $DEFAULTLIMIT, env: \$GH_WORKON_LIMIT)"
  echo "  -F use issue directly don't search for it (useful if you reach limit)"
  echo "  -j use jira ticket need need ankitpokhrel/jira-cli installed and \$GH_WORKON_JIRA_SERVER to be set or will be detected if full url is provided"
  echo "  -p pick a branch from where to start from with fzf (env: \$GH_WORKON_PICK_BRANCH)"
  echo "  -w PATH create a worktree taking this PATH as base (env: \$GH_WORKON_WORKTREE)"
}

while getopts "dhcjFNhAl:w:p" o; do
  case "${o}" in
  p)
    frombranch=yes
    ;;
  A)
    noassignee=true
    ;;
  d)
    debug="echo"
    ;;
  l)
    limit=$OPTARG
    ;;
  c)
    commitmessage=t
    ;;
  h)
    usage
    exit 0
    ;;
  F)
    nofzf=yes
    ;;
  j)
    jira=yes
    ;;
  N)
    createbranch=
    ;;
  w)
    worktree=$OPTARG
    ;;
  *)
    echo "Invalid option: -$1" >&2
    usage
    exit 1
    ;;
  esac
done
shift $((OPTIND - 1))

ARGS="$*"
[[ -z ${limit} ]] && limit=$DEFAULTLIMIT

git rev-parse --show-toplevel 2>/dev/null >/dev/null || {
  echo "error: not in a git repository" >&2
  exit 1
}

if [[ -n ${nofzf} && -z ${ARGS} ]]; then
  echo "need a arg when -F"
  exit 1
elif [[ -n ${nofzf} ]]; then
  nofzf=${ARGS[0]}
elif [[ -n ${jira} ]]; then
  jira=${ARGS[0]}
elif [[ -n ${ARGS} ]]; then
  ARGS="-q $*"
fi

[[ -n $frombranch || -n ${GH_WORKON_PICK_BRANCH-:""} && -z ${commitmessage} ]] && {
  git branch --sort=-committerdate --format='%(refname:short)' |
    fzf --border --preview "git log --no-merges --patch-with-stat -1 {}|\$(command -v bat > /dev/null && echo 'bat --language=diff --color=always' || echo 'cat')" \
      --prompt "Pick a branch to start from: " \
      --preview-window=up:60%
  [[ $frombranch == "" ]] && exit 0
}

[[ -n ${commitmessage} && -z ${ARGS} && $(basename $(git symbolic-ref -q HEAD)) =~ issue-([0-9]*) ]] && {
  ARGS="-q ${BASH_REMATCH[1]}"
}

export CLICOLOR_FORCE=1
if [[ -n ${nofzf} ]]; then
  _resp=$(gh issue view --json 'number,title' --jq '"#" + (.number|tostring) + " " + .title' ${nofzf})
  title=${_resp#* }
  n=${_resp%% *}
  number=${n#\#}
elif [[ -n ${jira} ]]; then
  if [[ ${jira} =~ https://([^/]*)/browse/([^/]*) ]]; then
    [[ -z ${GH_WORKON_JIRA_SERVER:-""} ]] && GH_WORKON_JIRA_SERVER=https://${BASH_REMATCH[1]}
    jira=${BASH_REMATCH[2]}
  fi
  [[ -z ${GH_WORKON_JIRA_SERVER:-""} ]] && {
    echo "GH_WORKON_JIRA_SERVER en variable need to be set"
    exit 1
  }
  title=$(curl -s -f --fail-early ${GH_WORKON_JIRA_SERVER}/rest/api/2/issue/${jira} | jq -r ".fields.summary")
  [[ -z ${title} ]] && {
    echo "no titlte found for ${jira}"
    exit 1
  }
  title=${jira}-${title,,}
  number=${jira}
else
  title=$(gh issue list -L ${limit} --json number,title --jq '.[] | "#" + (.number|tostring) + " " + .title' | ${SED} -e "s/'//g" -e 's/`//g' | fzf --prompt "Pick a GH issue: " -1 ${ARGS} --ansi --header "Choose a GitHUB Issue" --ansi --preview="env GH_FORCE_TTY=80% CLICOLOR_FORCE=1 gh issue view \`echo '{}'|${SED} 's/#\([0-9]*\).*/\1/'\`")
  number=$(echo $title | ${SED} 's/[ ]*#\([0-9]*\).*/\1/')
fi

if [[ -n ${commitmessage} ]]; then
  echo $title | ${SED} -r 's/[ ]*#[0-9]+[ ]*//;'
  echo
  echo "Fixes #$number"
  exit
fi

prefix=$(echo "$title" | ${SED} -r 's,kind/\w+,,;s/help wanted//;s/[ ]*#(.*)/\L\1/;s/ [ ]*/ /g;s/[ ]*$//;s/^[ ]*//;s/ /-/g;s,/,,g;s,\(/\`||:|;|"|\|\),,g;s/\\n//g')
prefix=$(echo "${prefix}" | ${SED} -r "s/('|,)//g;")
prefix=$(echo "$prefix" | ${AWK} -v len=60 "{ if (length(\$0) > len) print substr(\$0, 1, len-3); else print; }")
[[ $prefix == *- ]] && prefix=$(echo ${prefix} | ${SED} 's/-$//')

if [[ -z ${title} || -z ${number} ]]; then
  echo "Can't get title or number"
  exit
fi

if [[ -z ${noassignee} ]]; then
  if [[ -n ${jira} ]]; then
    if [[ -n $(type -p jira 2>/dev/null) ]]; then
      $debug jira issue assign ${jira} $GH_WORKON_JIRA_ME >&2
    else
      echo "need jira-bin (https://github.com/go-jira/jira) installed and configured to assign jira"
    fi
  else
    $debug gh issue edit ${number} --add-assignee "@me" >&2
  fi
fi

[[ -z $worktree ]] && echo issue-${prefix}
[[ -z ${createbranch} ]] && exit 0

if [[ -n ${worktree} ]]; then
  d=${worktree}/issue-${prefix}
  d=$(readlink -f $d)
  $debug git worktree add $d -b issue-${prefix} ${frombranch} >&2
  echo "$d"
  exit 0
fi

$debug git checkout -b issue-${prefix} ${frombranch} >&2
